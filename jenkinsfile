pipeline {
    agent any

    environment {
        VENV_DIR = '.venv'
        MODEL_FILE = 'churn_model.pkl'
        COMPOSE_FILE = 'docker-compose.yml'
        PYTHON_BIN = 'python3'
    }

    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    env.PROJECT_DIR = env.WORKSPACE
                    env.COMPOSE_CMD = sh(
                        script: 'if command -v docker-compose >/dev/null 2>&1; then echo docker-compose; else echo "docker compose"; fi',
                        returnStdout: true
                    ).trim()

                    dir(env.PROJECT_DIR) {
                        if (!fileExists(env.COMPOSE_FILE)) {
                            error "‚ùå Unable to find ${env.COMPOSE_FILE} in ${env.PROJECT_DIR}."
                        }
                    }
                }
            }
        }

        stage('Start Docker Services') {
            steps {
                script {
                    echo "üìå Stopping existing Docker services..."
                    dir(env.PROJECT_DIR) {
                        sh """
                            ${env.COMPOSE_CMD} -f ${COMPOSE_FILE} down || true
                            echo "üìå Starting Docker services..."
                            ${env.COMPOSE_CMD} -f ${COMPOSE_FILE} up -d
                        """
                    }
                }
            }
        }

        stage('Verify Docker Services') {
            steps {
                script {
                    echo "üìå Checking running Docker containers..."
                    dir(env.PROJECT_DIR) {
                        sh """
                            ${env.COMPOSE_CMD} -f ${COMPOSE_FILE} ps
                        """
                    }
                }
            }
        }

        stage('Verify Elasticsearch') {
            steps {
                script {
                    echo "üìå Waiting for Elasticsearch to be ready (Groovy approach)..."

                    int maxRetries = 30
                    int attempt = 0
                    boolean esReady = false

                    while (attempt < maxRetries) {
                        attempt++
                        echo "Attempt #${attempt}: Checking Elasticsearch..."

                        String esResponse = sh(
                            script: "curl -s http://localhost:9200 || true",
                            returnStdout: true
                        ).trim()

                        if (esResponse.contains("You Know, for Search")) {
                            echo "‚úÖ Elasticsearch is running!"
                            esReady = true
                            break
                        } else {
                            echo "Elasticsearch not ready yet; sleeping 5 seconds..."
                            sleep 5
                        }
                    }

                    if (!esReady) {
                        error "‚ùå Elasticsearch did not respond with 'You Know, for Search' after ${maxRetries} attempts."
                    }
                }
            }
        }

        stage('Verify Kibana') {
            steps {
                script {
                    echo "üìå Waiting for Kibana to be ready (HTTP 200 approach)..."

                    int maxRetries = 30
                    int attempt = 0
                    boolean kbReady = false

                    while (attempt < maxRetries) {
                        attempt++
                        echo "Attempt #${attempt}: Checking Kibana..."

                        String kbResponseCode = sh(
                            script: "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:5601 || true",
                            returnStdout: true
                        ).trim()

                        echo "Kibana HTTP status code: ${kbResponseCode}"

                        if (kbResponseCode == "200") {
                            echo "‚úÖ Kibana is running with HTTP 200!"
                            kbReady = true
                            break
                        } else {
                            echo "Kibana not ready yet; sleeping 5 seconds..."
                            sleep 5
                        }
                    }

                    if (!kbReady) {
                        error "‚ùå Kibana not responding with 200 after ${maxRetries} attempts."
                    }
                }
            }
        }

        stage('Setup Python Environment') {
            steps {
                dir(env.PROJECT_DIR) {
                    sh """
                        if [ ! -d "${VENV_DIR}" ]; then
                            ${PYTHON_BIN} -m venv ${VENV_DIR}
                        fi
                    """
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo "üìå Installing Python dependencies..."
                    dir(env.PROJECT_DIR) {
                        sh """
                            set -e
                            . ${VENV_DIR}/bin/activate
                            pip install --upgrade pip
                            pip install --no-cache-dir -r requirements.txt
                        """
                    }
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    echo "üìå Running unit tests..."
                    dir(env.PROJECT_DIR) {
                        sh """
                            set +e
                            . ${VENV_DIR}/bin/activate
                            pytest test_pipeline.py
                            test_status=$?
                            set -e
                            if [ ${test_status} -ne 0 ]; then
                                echo "‚ö†Ô∏è Some tests failed, but continuing..."
                            fi
                            exit 0
                        """
                    }
                }
            }
        }

        stage('Train Model and Log Metrics') {
            steps {
                script {
                    echo "üìå Training ML model..."
                    dir(env.PROJECT_DIR) {
                        sh """
                            set -e
                            . ${VENV_DIR}/bin/activate
                            python main1.py --train_path churn-bigml-80.csv --test_path churn-bigml-20.csv --save_model ${MODEL_FILE}
                        """
                    }
                }
            }
        }

        stage('Verify Model Output') {
            steps {
                script {
                    echo "üìå Checking if model file exists..."
                    dir(env.PROJECT_DIR) {
                        if (!fileExists(MODEL_FILE)) {
                            error "‚ùå Model file not found! Training might have failed."
                        }
                        echo "‚úÖ Model file verified."
                    }
                }
            }
        }

        stage('Restart Flask App') {
            steps {
                script {
                    echo "üìå Restarting Flask application..."
                    dir(env.PROJECT_DIR) {
                        sh """
                            ${env.COMPOSE_CMD} -f ${COMPOSE_FILE} restart flask_app
                        """
                    }
                }
            }
        }

        stage('Test Flask API') {
            steps {
                script {
                    echo "üìå Testing Flask API..."
                    sh """
                        curl -X POST "http://localhost:8082/predict" -H "Content-Type: application/x-www-form-urlencoded" \
                             -d "account_length=100&num_vmail_messages=10&total_day_calls=50&total_day_charge=15.0&total_eve_calls=40&total_eve_charge=10.0&total_night_calls=60&total_night_charge=8.0&total_intl_calls=3&total_intl_charge=3.5&customer_service_calls=1&international_plan=0&voice_mail_plan=1"
                    """
                }
            }
        }

        stage('Archive Model & Logs') {
            steps {
                script {
                    echo "üìå Archiving logs and model..."
                    dir(env.PROJECT_DIR) {
                        archiveArtifacts artifacts: MODEL_FILE, fingerprint: true
                        sh """
                            ${env.COMPOSE_CMD} -f ${COMPOSE_FILE} logs > jenkins_docker_logs.txt
                        """
                        archiveArtifacts artifacts: 'jenkins_docker_logs.txt', fingerprint: true
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs for details."
        }
    }
}
